{"version":3,"sources":["utils/cssUtils.js","components/song/Song.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","props","title","enriched","youtube","snippet","artist","song","classes","Card","className","card","CardContent","Typography","style","minHeight","fontSize","gutterBottom","CardActions","rel","target","href","url","class","genre","App","Loading","Grid","MuiPaper-root","container","Object","keys","data","map","key","offset","height","placeholder","item","xs","once","Song","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"403RAEaA,EAAYC,YAAW,SAAAC,GAAK,MAAK,CAC1CC,KAAM,CACJC,SAAU,GAEZC,MAAO,CACLC,QAASJ,EAAMK,QAAQ,GACvBC,MAAON,EAAMO,QAAQC,KAAKC,c,wBCCjB,WAAUC,GACrB,IACMC,EADaD,EAAME,UAAYF,EAAMG,QAChBH,EAAMG,QAAQC,QAAQH,MAAzB,UAAoCD,EAAMK,OAA1C,cAAsDL,EAAMM,MAC9EC,EAAUnB,IAChB,OACI,kBAACoB,EAAA,EAAD,CAAMC,UAAWF,EAAQG,MACrB,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYH,UAAWF,EAAQN,MAAOY,MAAO,CAACC,UAAW,OAAQC,SAAU,QAASnB,MAAM,gBAAgBoB,cAAY,GACjHf,IAMT,kBAACgB,EAAA,EAAD,KACI,kBAACL,EAAA,EAAD,CAAYC,MAAO,CAACE,SAAU,SAAS,uBAAGG,IAAI,sBAAsBC,OAAO,SAASC,KAAMpB,EAAMqB,KAAK,uBAAGC,MAAM,kBAAT,qBACrG,kBAACV,EAAA,EAAD,CAAYC,MAAO,CAACE,SAAU,SAAUf,EAAMuB,U,yBCW/CC,MA5Bf,WAEE,IAAMC,EAAU,kBACd,mCAGIlB,EAAUnB,IAChB,OACE,yBAAKqB,UAAU,iBACb,yBAAKA,UAAWF,EAAQhB,MACtB,kBAACmC,EAAA,EAAD,CAAMC,iBAAA,EAAcC,WAAS,EAACjC,QAAS,GACpCkC,OAAOC,KAAKC,GAAMC,IAAI,SAAAC,GACrB,OAASF,EAAKE,GAAKD,IAAI,SAAA1B,GAAI,OACzB,kBAAC,IAAD,CAAU4B,OAAQ,IAAKC,OAAQ,IAAKF,IAAKA,EAAKG,YAAa,kBAACX,EAAD,OACzD,kBAACC,EAAA,EAAD,CAAMW,MAAI,EAACC,GAAI,GACb,kBAAC,IAAD,CAAUC,MAAM,GACd,kBAACC,EAASlC,cCZVmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.18f7a1d4.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles(theme => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n  }));","import React from 'react';\r\nimport Iframe from './Iframe';\r\nimport IframeSubstitute from './IframeSubstitute';\r\nimport { Typography } from '@material-ui/core';\r\nimport {useStyles} from '../../utils/cssUtils';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nexport default function (props) {\r\n    const isEnriched = props.enriched && props.youtube\r\n    const title = isEnriched ? props.youtube.snippet.title : `${props.artist} - ${props.song}`\r\n    const classes = useStyles();\r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardContent>\r\n                <Typography className={classes.title} style={{minHeight: '80px', fontSize: '12px'}} color=\"textSecondary\" gutterBottom>\r\n                    {title}\r\n                    {/* <a href={props.url}>{title}</a> */}\r\n                    {/* {isEnriched ? <Iframe {...props.youtube}/> : <IframeSubstitute />} */}\r\n                    \r\n                </Typography>\r\n            </CardContent>\r\n            <CardActions>\r\n                <Typography style={{fontSize: '10px'}}><a rel=\"noopener noreferrer\" target=\"_blank\" href={props.url}><i class=\"material-icons\">open_in_browser</i></a></Typography>\r\n                <Typography style={{fontSize: '10px'}}>{props.genre}</Typography>\r\n            </CardActions>\r\n        </Card>\r\n\r\n          \r\n    );\r\n}","import React from 'react';\nimport './App.css';\nimport data from './data.json'\nimport Song from \"./components/song/Song\";\nimport Grid from '@material-ui/core/Grid';\nimport {useStyles} from './utils/cssUtils';\nimport LazyLoad from 'react-lazyload';\n\nfunction App() {\n\n  const Loading = () => (\n    <p>...</p>\n  )\n\n  const classes = useStyles();\n  return (\n    <div className=\"App container\">\n      <div className={classes.root}>\n        <Grid\tMuiPaper-root container spacing={2}>\n          {Object.keys(data).map(key => {\n            return ( data[key].map(song => (\n              <LazyLoad offset={100} height={500} key={key} placeholder={<Loading />}>\n                <Grid item xs={2}>\n                  <LazyLoad once={true}>\n                    <Song {...song}/>\n                  </LazyLoad>\n                </Grid>\n              </LazyLoad>\n            )))\n          })}\n        </Grid>\n      </div> \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}