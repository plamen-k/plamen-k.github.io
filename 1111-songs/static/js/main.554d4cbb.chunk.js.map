{"version":3,"sources":["utils/cssUtils.js","components/song/Song.js","components/song/IframeSubstitute.js","components/song/Iframe.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","color","palette","text","secondary","props","isEnriched","enriched","youtube","title","snippet","artist","song","classes","Card","className","card","CardActionArea","onClick","click","CardContent","Typography","style","minHeight","fontSize","gutterBottom","Divider","light","CardActions","class","genre","url","width","height","backgroundColor","Button","window","open","focus","openInNewTab","marginTop","variant","button","disabled","source","id","kind","videoId","playlistId","console","log","src","frameborder","allow","allowfullscreen","IframeSubstitute","App","useState","currentSong","state","setState","onSongClick","marginBottom","Iframe","Grid","MuiPaper-root","container","offset","placeholder","Object","keys","data","map","key","item","xs","sm","md","once","Song","boxShadow","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.554d4cbb.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const useStyles = makeStyles((theme, root) => ({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    ...root\r\n  }));","import React from 'react';\r\nimport { Typography, Divider } from '@material-ui/core';\r\nimport {useStyles} from '../../utils/cssUtils';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\n\r\nexport default function (props) {\r\n    const isEnriched = props.enriched && props.youtube\r\n    const title = isEnriched ? props.youtube.snippet.title : `${props.artist} - ${props.song}`\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Card className={classes.card}>\r\n            <CardActionArea onClick={() => props.click(props)}>\r\n                <CardContent>\r\n                    <Typography className={classes.title} style={{minHeight: '110px', fontSize: '1.5em'}} gutterBottom>\r\n                        {title}\r\n                    </Typography>\r\n                </CardContent>\r\n                <Divider className={\"MuiDivider-root\"} light />\r\n                <CardActions>\r\n                    { isEnriched && <Typography ><i style={{\"fontSize\": \"1.3em\", \"marginTop\": \"5px\"}} class=\"material-icons\">timeline</i></Typography> }\r\n                    <Typography style={{\"fontSize\": \"1.2em\"}}>{props.genre}</Typography>\r\n                </CardActions>\r\n            </CardActionArea>\r\n        </Card>\r\n\r\n          \r\n    );\r\n}","import React from 'react';\r\nimport {useStyles} from '../../utils/cssUtils';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst openInNewTab = (url) => {\r\n    var win = window.open(url, '_blank');\r\n    win.focus();\r\n}\r\n\r\nexport default function ({url}) {\r\n    const classes = useStyles();\r\n    \r\n    return (<div width=\"100%\" height=\"150px\" style={{ backgroundColor: '#333', height: '150px', width: '100%'}}>\r\n        \r\n        { url && <Button onClick={() => openInNewTab(url)} style={{marginTop: \"26px\"}} variant=\"contained\" className={classes.button}>\r\n            <h2>Open Youtube</h2>\r\n        </Button>}\r\n\r\n        {! url && <Button disabled style={{marginTop: \"26px\"}} variant=\"contained\" className={classes.button}>\r\n            <h2>Click a song</h2>\r\n        </Button>}\r\n        \r\n    </div>)\r\n}","import React from 'react';\r\nimport IframeSubstitute from \"./IframeSubstitute\";\r\n\r\nexport default function ({url, youtube, title}) {\r\n    let source;\r\n    if(youtube && youtube.id && youtube.id.kind) {\r\n      switch(youtube.id.kind) {\r\n        case \"youtube#video\":\r\n          source = `https://www.youtube.com/embed/${youtube.id.videoId}`\r\n          break;\r\n        case \"youtube#playlist\":\r\n            source = `https://www.youtube.com/embed/videoseries?list=${youtube.id.playlistId}`\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    console.log(source)\r\n    if(!source) {\r\n      console.log(\"have this\")\r\n      return (<IframeSubstitute url={url}/>)\r\n    }\r\n    return (<iframe \r\n        title={title}\r\n        width=\"100%\" \r\n        height=\"150px\" \r\n        src={source}\r\n        frameborder=\"0\" \r\n        allow=\"autoplay; encrypted-media; picture-in-picture\" \r\n        allowfullscreen>\r\n    </iframe>)\r\n}","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport data from './data.json'\r\nimport Song from \"./components/song/Song\";\r\nimport Grid from '@material-ui/core/Grid';\r\nimport {useStyles} from './utils/cssUtils';\r\nimport LazyLoad from 'react-lazyload';\r\nimport Iframe from './components/song/Iframe';\r\n\r\nfunction App() {\r\n\r\n  const [state, setState] = useState({\r\n    currentSong: null\r\n  })\r\n\r\n  const Loading = () => (\r\n    <p>...</p>\r\n  )\r\n\r\n  const onSongClick = (song) => {\r\n    console.log(\"CLICKED SONG: \", song);\r\n    setState({currentSong: song})\r\n  }\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className=\"App container\">\r\n      <div style={{marginBottom: \"30px\"}}><Iframe {...state.currentSong} ></Iframe></div>\r\n      <div className={classes.root}>\r\n        <Grid\tMuiPaper-root container spacing={2} style={{\r\n          \"height\":\"600px\",\r\n          \"width\":\"100%\",\r\n          \"overflow-y\":\"scroll\",\r\n          \"overflow-x\":\"hidden\"\r\n          }}>\r\n          <LazyLoad offset={0} height={100} placeholder={<Loading />}>\r\n          {Object.keys(data).map(key => {\r\n            return ( data[key].map(song => (\r\n                <Grid item xs={6} sm={3} md={2}>\r\n                  <LazyLoad once={true}>\r\n                    <Song click={onSongClick} boxShadow={10} {...song}/>\r\n                  </LazyLoad>\r\n                </Grid>\r\n            )))\r\n          })}\r\n          </LazyLoad>\r\n        </Grid>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}