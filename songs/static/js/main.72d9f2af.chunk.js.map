{"version":3,"sources":["utils/localStorage.ts","components/song/IframeComponent.tsx","components/song/Song.tsx","components/song/IframeSubstitute.tsx","utils/index.ts","components/song/LikeDislikeComponent.tsx","components/song/TooltipComponent.tsx","components/song/SongLoading.tsx","components/song/SongWrapper.tsx","App.js","serviceWorker.js","index.js"],"names":["getAll","localStoreEntriesAsJson","save","song","entries","id","writeUpdate","results","localStorage","getItem","JSON","parse","Buffer","toString","jsonEntities","dataToSave","stringify","setItem","iframeComponent","SongType","IframeSubstitute","url","title","className","Button","onClick","window","open","focus","openInNewTab","variant","Iframe","React","memo","source","kind","autoplayValue","autoplay","height","width","src","frameBorder","allow","allowFullScreen","Fragment","currentProps","nextProps","getMoreSongs","list","chunk","length","songs","i","pop","push","getRandomSong","Math","floor","random","LikeDislikeComponent","liked","setLiked","likeDislike","interaction","value","Card","Content","extra","data-testid","basic","undefined","color","TooltipComponent","likedStatus","Popup","content","trigger","Icon","name","Song","useState","classes","active","setActiveSong","click","Description","genre","SongLoading","Placeholder","Paragraph","Line","Dimmer","inverted","Loader","songPreferences","CHUNKS_TO_LOAD_ON_SCROLL","INITIAL_CHUNKS_TO_LOAD","SongWrapper","props","state","addMoreSongs","setState","concat","activeSong","Object","assign","genresList","nextState","nextContext","this","continuous","once","onUpdate","nothing","data","shouldLoadMoreSongs","Grid","padded","centered","map","Column","key","mobile","tablet","computer","largeScreen","widescreen","throttle","placeholder","onSongClick","calculations","pixelsPassed","Component","ReactGA","initialize","pageview","location","pathname","search","App","currentSong","toggleAutoplay","e","playRandomSong","randomSong","songsList","youtube","Menu","Item","Checkbox","onChange","toggle","label","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72d9f2af.chunk.js","sourcesContent":["export const SONG_DATA_KEY = \"SONGS_DATA\";\n\nexport interface IUserInteraction {\n    liked: boolean | undefined;\n    id: number;\n}\n\nexport interface IUserPreferences { [s: string]: IUserInteraction; }\n\nexport const getAll = (): IUserPreferences => {\n    return localStoreEntriesAsJson();\n};\n\nexport const save = (song: IUserInteraction): void =>  {\n    const entries: IUserPreferences = localStoreEntriesAsJson();\n\n    entries[song.id] = song;\n    writeUpdate(entries);\n};\n\nconst localStoreEntriesAsJson = (): IUserPreferences => {\n    const results: string = localStorage.getItem(SONG_DATA_KEY) || \"e30=\";\n    return JSON.parse(new Buffer(results, \"base64\").toString(\"ascii\"));\n};\n\nconst writeUpdate = (jsonEntities: IUserPreferences) => {\n    const dataToSave = new Buffer(JSON.stringify(jsonEntities)).toString(\"base64\");\n    localStorage.setItem(SONG_DATA_KEY, dataToSave);\n};\n","import React from \"react\";\nimport { IframeSubstitute } from \"./IframeSubstitute\";\n\nlet iframeComponent;\n\nexport interface IIframeProps {\n    id: number;\n    url: string;\n    title: string;\n    autoplay?: boolean;\n    kind: string;\n}\n\nconst hasComponentChanged = (currentProps: IIframeProps, nextProps: IIframeProps) => {\n    return (currentProps.title === nextProps.title && currentProps.url === nextProps.url);\n};\n\nexport const Iframe = React.memo<IIframeProps>((({url, kind, title, autoplay}: IIframeProps) => {\n    const autoplayValue = autoplay ? 1 : 0;\n    let source;\n    if (kind) {\n        switch (kind) {\n            case \"youtube#video\":\n                source = `https://www.youtube.com/embed/${url}?autoplay=${autoplayValue}`;\n                break;\n            case \"youtube#playlist\":\n                source = `https://www.youtube.com/embed/videoseries?list=${url}`;\n                break;\n            default:\n                break;\n        }\n    }\n    if (!source) {\n        iframeComponent = (<IframeSubstitute title={title} url={url}/>);\n    } else {\n        iframeComponent = (<iframe\n            title={title}\n            height=\"150px\"\n            width=\"300px\"\n            src={source}\n            frameBorder=\"0\"\n            allow=\"autoplay; encrypted-media; picture-in-picture\"\n            allowFullScreen\n        >\n        </iframe>);\n    }\n\n    return (\n        <React.Fragment>\n            {iframeComponent}\n        </React.Fragment>\n    );\n}), hasComponentChanged);\n","import React, {useState} from \"react\";\nimport {Card} from \"semantic-ui-react\";\nimport { IIframeProps } from \"./IframeComponent\";\nimport {LikeDislikeComponent} from \"./LikeDislikeComponent\";\nimport {TooltipComponent} from \"./TooltipComponent\";\n\nexport enum SongType {\n    none= \"none\", playlist = \"youtube#playlist\", song = \"youtube#song\",\n}\n\nexport interface ISongProps {\n    active: boolean;\n    genre: string;\n    id: number;\n    kind: SongType;\n    liked?: boolean | undefined;\n    title: string;\n    url: string;\n    click(iframeData: IIframeProps): void;\n    setActiveSong(id: number): void;\n}\n\nexport const Song = React.memo((song: ISongProps) => {\n\n    const [liked, setLiked] = useState(song.liked);\n\n    let classes = \"song-card\";\n    if (song.active) {\n        classes += \" active\";\n    }\n    return (\n        <Card className={classes} >\n            <Card.Content data-testid=\"song-card-clickable\" onClick={() => {\n                song.setActiveSong(song.id);\n                song.click({\n                    title: song.title,\n                    url: song.url,\n                    kind: song.kind,\n                } as IIframeProps);\n            }}>\n                <Card.Description className=\"song-card-title\">\n                    {song.title}\n                </Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Card.Description className=\"song-card-meta\">\n                    {song.genre}\n                    <span className=\"ui right floated \">\n                        <TooltipComponent liked={liked} kind={song.kind}/>\n                    </span>\n                </Card.Description>\n            </Card.Content>\n            <span className=\"hide\">\n                <LikeDislikeComponent liked={liked} id={song.id} setLiked={setLiked} />\n            </span>\n        </Card>\n    );\n});\n","import React from \"react\";\nimport { Button } from \"semantic-ui-react\";\n\nconst openInNewTab = (url: string) => {\n    const win: any = window.open(url, \"_blank\");\n    win.focus();\n};\n\ninterface IIframeSubstituteProps {\n    url: string;\n    title: string;\n}\n\nexport const IframeSubstitute = ({url, title}: IIframeSubstituteProps) => {\n    return (\n        <>\n            { url &&\n            <div className=\"fake-iframe-music-player\">\n                <Button className=\"iframe-music-player-button\" onClick={() => openInNewTab(url)} variant=\"contained\">\n                    <p>Open \"{title}\" on youtube</p>\n                </Button>\n            </div>}\n        </>\n    );\n};\n","import {SongType} from \"../components/song/Song\";\n\nexport interface IJsonSong {\n  id: number;\n  genre: string;\n  title: string;\n  url: string;\n  kind: SongType;\n}\n\nexport const getMoreSongs = (list: IJsonSong[], chunk: number): IJsonSong[] => {\n  if (!list.length) {\n    return [];\n  }\n  const songs: IJsonSong[] = [];\n  for (let i = 0; i < chunk; i++) {\n    const song = list.pop();\n    if (!song) {\n      break;\n    }\n    songs.push(song);\n  }\n  return songs;\n};\n\nexport const getRandomSong = (list: IJsonSong[]): IJsonSong | {} => {\n  if (!list.length) {\n    return {};\n  }\n  const randomSongIndex = Math.floor(Math.random() * (list.length));\n  return list[randomSongIndex];\n};\n","import React from \"react\";\nimport {Button, Card} from \"semantic-ui-react\";\nimport {IUserInteraction, save} from \"../../utils/localStorage\";\n\ninterface ILike {\n    liked: boolean | undefined;\n    id: number;\n    setLiked(liked: boolean | undefined): void;\n}\n\nexport const LikeDislikeComponent = ({liked, id, setLiked}: ILike) => {\n    const likeDislike = (interaction: IUserInteraction) => {\n        let value: boolean | undefined;\n        if ( !(interaction.liked === liked )) {\n            value = interaction.liked;\n        }\n        setLiked(value);\n        save(interaction);\n    };\n\n    return (\n        <Card.Content extra>\n            <div className=\"ui two buttons\">\n                <Button data-testid={\"like-button\"} basic={liked === false || liked === undefined}\n                        onClick={() => likeDislike({id, liked: true})}\n                        color=\"green\">\n                    Like\n                </Button>\n                <Button data-testid={\"dislike-button\"} basic={liked === true || liked === undefined}\n                        onClick={() => likeDislike({id, liked: false})}\n                        color=\"red\">\n                    Dislike\n                </Button>\n            </div>\n        </Card.Content>\n    );\n};\n","import React from \"react\";\nimport {Icon, Popup} from \"semantic-ui-react\";\nimport {SongType} from \"./Song\";\n\ninterface ITooltip {\n    liked: boolean | undefined;\n    kind: SongType;\n}\n\nexport const TooltipComponent = ({liked, kind}: ITooltip) => {\n    let likedStatus: \"caret down\" | \"thumbs up\" | \"thumbs down\" = \"caret down\";\n    let color: \"grey\" | \"green\" | \"red\" = \"grey\";\n\n    if (liked === true) {\n        likedStatus = \"thumbs up\";\n        color = \"green\";\n    } else if (liked === false) {\n        likedStatus = \"thumbs down\";\n        color = \"red\";\n    }\n\n    return (\n        <>\n            {kind !== \"none\" &&\n                <Popup content=\"This song is embedded\" trigger={\n                    <Icon data-testid=\"embedded-song\" color=\"grey\" name=\"sound\"/>\n                }/>\n            }\n            < Icon\n                data-testid=\"embedded-like-dislike-song\"\n                color={color}\n                name={likedStatus}/>\n            {kind === \"none\" &&\n                <Popup content=\"This song is not embedded\" trigger={\n                    <Icon data-testid=\"not-embedded-song-tooltip\" color=\"grey\" name=\"external alternate\"/>\n                } />\n            }\n        </>\n    );\n};\n","import React from \"react\";\nimport { Card, Dimmer, Loader, Placeholder } from \"semantic-ui-react\";\n\nexport const SongLoading = () => {\n    return (\n        <Card className=\"song-card\">\n            <Card.Content>\n                <Card.Description className=\"song-card-title\">\n                    <Placeholder>\n                        <Placeholder.Paragraph>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder.Paragraph>\n                    </Placeholder>\n                    <Dimmer active inverted>\n                        <Loader inverted></Loader>\n                    </Dimmer>\n                </Card.Description>\n            </Card.Content>\n        </Card>\n\n    );\n};\n","import { IIframeProps } from \"components/song/IframeComponent\";\nimport React from \"react\";\nimport LazyLoad from \"react-lazyload\";\nimport {Grid, VisibilityEventData} from \"semantic-ui-react\";\nimport Visibility from \"semantic-ui-react/dist/commonjs/behaviors/Visibility\";\nimport genresList from \"../../data/simplified.json\";\nimport {getMoreSongs, IJsonSong} from \"../../utils\";\nimport {getAll} from \"../../utils/localStorage\";\nimport { Song } from \"./Song\";\nimport {SongLoading} from \"./SongLoading\";\n\nconst songPreferences = getAll();\nconst list: IJsonSong[] = [];\n\nconst CHUNKS_TO_LOAD_ON_SCROLL = 64;\nconst INITIAL_CHUNKS_TO_LOAD = 124;\n\ninterface ISongWrapperProps {\n    onSongClick(iframeData: IIframeProps): void;\n}\n\ninterface ISongWrapperState {\n    songs: IJsonSong[];\n    activeSong: undefined | number;\n}\n\nexport class SongWrapper extends React.Component<ISongWrapperProps, ISongWrapperState> {\n    constructor(props: ISongWrapperProps, state: any) {\n        super(props, state);\n        Object.assign(list, genresList);\n        this.state = {\n            activeSong: undefined,\n            songs: getMoreSongs(list, INITIAL_CHUNKS_TO_LOAD),\n        };\n    }\n\n    public shouldComponentUpdate(\n        nextProps: Readonly<ISongWrapperProps>,\n        nextState: Readonly<ISongWrapperState>,\n        nextContext: any): boolean {\n        return !(this.state.songs === nextState.songs && this.state.activeSong === nextState.activeSong);\n    }\n\n    public render() {\n        return (\n            <Visibility\n                continuous={true}\n                once={true}\n                onUpdate={(nothing, data) => this.shouldLoadMoreSongs(nothing, data)}\n            >\n                <Grid padded centered>\n                    {this.state.songs.map((song: IJsonSong) => (\n                        <Grid.Column\n                            className=\"song-column-item\"\n                            data-testid=\"song-column-item\"\n                            key={song.url}\n                            mobile={8}\n                            tablet={4}\n                            computer={3}\n                            largeScreen={3}\n                            widescreen={2}>\n                            <LazyLoad once={true} throttle={100} height={1000} placeholder={<SongLoading/>} >\n                                <Song active={this.state.activeSong === song.id}\n                                      setActiveSong={this.setActiveSong} click={this.props.onSongClick}\n                                      { ...{...song,\n                                          liked: songPreferences[song.id] && songPreferences[song.id].liked,\n                                      }\n                                      }\n                                />\n                            </LazyLoad>\n                        </Grid.Column>\n                    ))}\n\n                </Grid>\n            </Visibility>\n\n        ); }\n\n    private shouldLoadMoreSongs(nothing: null, {calculations}: VisibilityEventData): void {\n        if (calculations.height - calculations.pixelsPassed < 2000) {\n            this.addMoreSongs();\n        }\n    }\n\n    private addMoreSongs = () => {\n        this.setState({\n            songs: this.state.songs.concat(getMoreSongs(list, CHUNKS_TO_LOAD_ON_SCROLL)),\n        });\n    }\n\n    private setActiveSong = (id: number) => {\n        this.setState({\n            activeSong: id,\n    });\n    }\n}\n","import React from 'react';\nimport {BrowserView} from \"react-device-detect\";\nimport {Button, Checkbox, Menu} from \"semantic-ui-react\";\n\nimport './App.css';\nimport { Iframe } from './components/song/IframeComponent';\nimport { SongWrapper } from './components/song/SongWrapper';\nimport ReactGA from 'react-ga';\nimport songsList from \"./data/simplified\";\nimport { getRandomSong } from \"./utils\";\n\nReactGA.initialize('UA-89618080-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nexport class App extends React.Component {\n    constructor(props, state) {\n        super(props, state);\n        this.state = {\n            currentSong: null,\n            autoplay: false\n        };\n    }\n\n    onSongClick = (song) => {\n        this.setState({\n            currentSong: song,\n        });\n    };\n\n    toggleAutoplay = (e) => {\n        this.setState({autoplay: !this.state.autoplay});\n    };\n\n    playRandomSong = () => {\n        const randomSong = getRandomSong(songsList);\n\n        this.onSongClick({\n            title: randomSong.title,\n            url: randomSong.url,\n            youtube: randomSong.youtube,\n            kind: randomSong.kind\n        });\n    };\n\n    render() {\n        return (\n            <div className=\"App iframe-container ui\">\n                <div className=\"youtube-player-container nopadding menu-container\">\n                    <div className=\"menu-container\">\n                        <Menu>\n                            <Menu.Item name='editorials'><Button onClick={this.playRandomSong}>Random Song</Button></Menu.Item>\n                            <BrowserView>\n                                <Menu.Item name='editorials'><Checkbox onChange={(e) => this.toggleAutoplay(\"enabled\")} toggle label='Autoplay'/></Menu.Item>\n                            </BrowserView>\n                        </Menu>\n                        <div className=\"iframe-element\">\n                            <Iframe  autoplay={this.state.autoplay} {...this.state.currentSong} />\n                        </div>\n\n                    </div>\n                </div>\n\n                <div className=\"overflow song-card-container centered nopadding\">\n                    <SongWrapper key=\"songWrapper\" onSongClick={this.onSongClick} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}