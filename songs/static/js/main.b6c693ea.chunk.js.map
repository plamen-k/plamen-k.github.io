{"version":3,"sources":["components/song/Iframe.tsx","components/song/IframeSubstitute.tsx","components/song/SongLoading.tsx","components/song/Song.tsx","components/song/SongWrapper.tsx","utils/index.ts","App.js","serviceWorker.js","index.js"],"names":["iframe","IframeSubstitute","url","className","Button","onClick","window","open","focus","openInNewTab","variant","disabled","Iframe","source","youtube","title","id","kind","videoId","playlistId","height","src","frameBorder","allow","allowFullScreen","style","width","backgroundColor","SongLoading","Card","minHeight","Content","Description","fontSize","Dimmer","active","inverted","Loader","Divider","horizontal","Song","enriched","artist","song","click","genre","isEnriched","snippet","Icon","name","songs","data","json","default","entries","Object","keys","forEach","push","getAllSongs","SongWrapper","React","memo","props","Grid","grid","map","Column","key","mobile","tablet","computer","overflow","once","throttle","placeholder","onSongClick","prevProps","nextProps","App","useState","currentSong","state","setState","marginBottom","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b6c693ea.chunk.js","sourcesContent":["import React from 'react';\r\nimport { IframeSubstitute } from \"./IframeSubstitute\";\r\nimport { YoutubeInterface } from '../../utils'\r\n\r\nconst height = \"220px\";\r\nlet iframe\r\n\r\nexport type IframeProps = {\r\n  url: string,\r\n  title: string,\r\n  youtube: YoutubeInterface\r\n}\r\n\r\nexport const Iframe = ({url, youtube, title}: IframeProps) => {\r\n    let source;\r\n    if(youtube && youtube.id && youtube.id.kind) {\r\n      switch(youtube.id.kind) {\r\n        case \"youtube#video\":\r\n          source = `https://www.youtube.com/embed/${youtube.id.videoId}`\r\n          break;\r\n        case \"youtube#playlist\":\r\n            source = `https://www.youtube.com/embed/videoseries?list=${youtube.id.playlistId}`\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n    if(!source) {\r\n      iframe = (<IframeSubstitute url={url}/>)\r\n    } else {\r\n      iframe = (<iframe \r\n          title={title}\r\n          height={height}\r\n          src={source}\r\n          frameBorder=\"0\" \r\n          allow=\"autoplay; encrypted-media; picture-in-picture\" \r\n          allowFullScreen>\r\n      </iframe>)\r\n    }\r\n\r\n    return (\r\n      <div style={{width:\"100%\", height: height,backgroundColor: \"#111\"}}>\r\n        {iframe}\r\n    </div>)\r\n}","import React from 'react';\r\nimport { Button } from 'semantic-ui-react'\r\n\r\nconst openInNewTab = (url: string) => {\r\n    var win: any = window.open(url, '_blank');\r\n    win.focus();\r\n}\r\n\r\ntype IframeSubstituteProps = {\r\n    url: string;\r\n}\r\n\r\nexport const IframeSubstitute = ({url}: IframeSubstituteProps) => {\r\n    return (<div className=\"iframe-music-player\">\r\n        { url && <Button className=\"iframe-music-player-button\" onClick={() => openInNewTab(url)} variant=\"contained\">\r\n            <h2>Open Youtube</h2>\r\n        </Button>}\r\n\r\n        {! url && <Button className=\"iframe-music-player-button\" disabled variant=\"contained\">\r\n            <h2>Click a song</h2>\r\n        </Button>}\r\n        \r\n    </div>)\r\n}","import React from 'react';\r\nimport { Dimmer, Loader, Card, Divider } from 'semantic-ui-react'\r\n\r\nexport const SongLoading = () => {\r\n    return (\r\n        <Card style={{minHeight: '260px'}}>\r\n            <Card.Content>\r\n                <Card.Description style={{minHeight: '140px', fontSize: '1.5em'}}>\r\n                <Dimmer active inverted>\r\n                    <Loader inverted>Loading</Loader>\r\n                </Dimmer>\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Divider horizontal />\r\n            <Card.Content>\r\n                \r\n                <Card.Description style={{\"fontSize\": \"1.2em\"}}>\r\n                    ...\r\n                </Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n    \r\n    )\r\n}","import React from 'react';\r\nimport { Card, Divider, Icon } from 'semantic-ui-react'\r\nimport { YoutubeInterface } from '../../utils'\r\nimport { IframeProps } from './Iframe';\r\n\r\nexport type SongProps = {\r\n    enriched: boolean,\r\n    youtube: YoutubeInterface,\r\n    artist: string,\r\n    song: string,\r\n    url: string,\r\n    genre: string,\r\n    click(iframeData: IframeProps): void\r\n}\r\n\r\nexport const Song = ({enriched, youtube, artist, song, click, genre, url}: SongProps) => {\r\n    const isEnriched = enriched && youtube\r\n    const title = isEnriched ? youtube.snippet.title : `${artist} - ${song}`\r\n    \r\n    return (\r\n        <Card className=\"song-card\" onClick={() => click({\r\n                url,\r\n                title,\r\n                youtube\r\n            })}>\r\n            <Card.Content>\r\n                <Card.Description className=\"song-card-title\">\r\n                    {title}\r\n                </Card.Description>\r\n            </Card.Content>\r\n            <Divider horizontal />\r\n            <Card.Content>\r\n                \r\n                <Card.Description className=\"song-card-meta\">\r\n                    {isEnriched && <Icon name=\"sound\"/>}\r\n                    {genre}\r\n                </Card.Description>\r\n            </Card.Content>\r\n        </Card>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport * as data from '../../data.json';\r\nimport { getAllSongs } from '../../utils';\r\nimport { Grid } from 'semantic-ui-react'\r\nimport { SongLoading } from './SongLoading'\r\nimport { Song } from './Song';\r\nimport LazyLoad from 'react-lazyload';\r\nimport { IframeProps } from 'components/song/Iframe';\r\nimport { JsonSong } from '../../utils'\r\n\r\nconst songs: JsonSong[] = getAllSongs(data);\r\n\r\ntype SongWrapperProps = {\r\n    onSongClick(iframeData: IframeProps): void\r\n}\r\n\r\nfunction areEqual(prevProps: SongWrapperProps, nextProps:SongWrapperProps) {\r\n    return true;\r\n}\r\n\r\nexport const SongWrapper = React.memo((props: SongWrapperProps) => {\r\n    return (\r\n        <Grid grid className=\"overflow\">\r\n            {songs.map(song => (\r\n                <Grid.Column key={song.url} mobile={6} tablet={3} computer={3}>\r\n                    <LazyLoad overflow once={true} throttle={100} height={1000} placeholder={<SongLoading/>} >\r\n                        <Song click={props.onSongClick} {...song}/>\r\n                    </LazyLoad>\r\n                </Grid.Column>\r\n            ))}\r\n        </Grid>\r\n    )\r\n}, areEqual);","type YoutubeId = {\r\n  kind: string,\r\n  playlistId?: string,\r\n  videoId?: string\r\n}\r\n\r\nexport type YoutubeInterface = {\r\n  snippet: any,\r\n  id: YoutubeId\r\n}\r\n\r\nexport type JsonSong = {\r\n  unique_id: string,\r\n  genre: string,\r\n  artist: string,\r\n  song: string,\r\n  url: string,\r\n  enriched: boolean,\r\n  youtube: YoutubeInterface\r\n}\r\n\r\ntype JsonBlob = {\r\n  [key: string]: JsonSong[];\r\n} \r\n\r\nexport const getAllSongs = (data: any) => {\r\n    const json: JsonBlob = data.default.entries\r\n    let songs: JsonSong[] = [];\r\n    \r\n    const genres: string[] = Object.keys(json);\r\n    genres.forEach((genre: string) => {\r\n\r\n      json[genre].forEach((song: JsonSong) => {\r\n        songs.push(song);\r\n      })\r\n    })\r\n    return songs;\r\n};","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport { Iframe } from './components/song/Iframe';\r\nimport { SongWrapper } from './components/song/SongWrapper';\r\n\r\nfunction App() {\r\n\r\n  const [state, setState] = useState({\r\n    currentSong: null\r\n  })\r\n\r\n  const onSongClick = (song) => {\r\n    setState({currentSong: song})\r\n  }\r\n  return (\r\n    <div className=\"App container\">\r\n      <div style={{marginBottom: \"30px\"}}><Iframe {...state.currentSong} ></Iframe></div>\r\n      <SongWrapper key=\"songWrapper\" onSongClick={onSongClick} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}